// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// mascota
model Mascota {
  id Int @id @default(autoincrement())

  nombre_mascota     String
  codigo_chip        String       @unique
  lugar_implantacion String
  fecha_implantacion DateTime
  fecha_nacimiento   DateTime
  especie            Especie
  raza               String
  sexo               Sexo
  aga                String?
  esterilizado       Esterilizado
  empresaId          Int
  Empresa         Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  Tutor         Tutor       @relation(fields: [tutorId], references: [id], onDelete: Cascade)
  tutorId       Int
  Veterinario   Veterinario @relation(fields: [veterinarioId], references: [id], onDelete: Cascade)
  veterinarioId Int
}

enum Especie {
  CANINO
  FELINO
}

enum Esterilizado {
  SI
  NO
}

enum Sexo {
  MACHO
  HEMBRA
}

// enum Estado {
//   ACTIVO
//   SANO
//   FALLECIDO
// }

// user model: admin/veterinario/tutor
model User {
  id Int @id @default(autoincrement())

  // reusar el email de la tabla propietario
  nombre         String
  identificacion String
  telefono       String
  email          String
  password       String
  Rol        Roles      @relation(fields: [rolId], references: [id])
  rolId            Int
  Tutor          Tutor[]
  Responsable    Veterinario[]
  Empresa        Empresa?      @relation(fields: [empresaId], references: [id])
  empresaId    Int
}

// propietario q reutiliza modelo user
model Tutor {
  id            Int     @id @default(autoincrement())
  observaciones String?
  direccion     String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mascotas Mascota[]
  userId   Int
}

// responsable/veterinario q reutiliza modelo user
model Veterinario {
  id           Int     @id @default(autoincrement())
  no_registro  String
  especialidad String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mascotas  Mascota[]
  userId    Int
}


model Empresa {
  id             Int           @id @default(autoincrement())
  nombre_empresa String
  usuarios    User[]
  Mascota         Mascota[]
  direccion      String
  telefono       String
  email          String
}

model Roles {
  id    Int    @id @default(autoincrement())
  rol   String
  user  User[]
}